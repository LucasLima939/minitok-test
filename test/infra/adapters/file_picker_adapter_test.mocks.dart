// Mocks generated by Mockito 5.4.4 from annotations
// in minitok_test/test/infra/adapters/file_picker_adapter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i6;

import 'package:cross_file/cross_file.dart' as _i2;
import 'package:file_picker/src/file_picker.dart' as _i3;
import 'package:file_picker/src/file_picker_result.dart' as _i5;
import 'package:file_picker/src/platform_file.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeXFile_0 extends _i1.SmartFake implements _i2.XFile {
  _FakeXFile_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FilePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilePicker extends _i1.Mock implements _i3.FilePicker {
  MockFilePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.FilePickerResult?> pickFiles({
    String? dialogTitle,
    String? initialDirectory,
    _i3.FileType? type = _i3.FileType.any,
    List<String>? allowedExtensions,
    dynamic Function(_i3.FilePickerStatus)? onFileLoading,
    bool? allowCompression = false,
    int? compressionQuality = 0,
    bool? allowMultiple = false,
    bool? withData = false,
    bool? withReadStream = false,
    bool? lockParentWindow = false,
    bool? readSequential = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickFiles,
          [],
          {
            #dialogTitle: dialogTitle,
            #initialDirectory: initialDirectory,
            #type: type,
            #allowedExtensions: allowedExtensions,
            #onFileLoading: onFileLoading,
            #allowCompression: allowCompression,
            #compressionQuality: compressionQuality,
            #allowMultiple: allowMultiple,
            #withData: withData,
            #withReadStream: withReadStream,
            #lockParentWindow: lockParentWindow,
            #readSequential: readSequential,
          },
        ),
        returnValue: _i4.Future<_i5.FilePickerResult?>.value(),
      ) as _i4.Future<_i5.FilePickerResult?>);

  @override
  _i4.Future<List<String>?> pickFileAndDirectoryPaths({
    String? initialDirectory,
    _i3.FileType? type = _i3.FileType.any,
    List<String>? allowedExtensions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickFileAndDirectoryPaths,
          [],
          {
            #initialDirectory: initialDirectory,
            #type: type,
            #allowedExtensions: allowedExtensions,
          },
        ),
        returnValue: _i4.Future<List<String>?>.value(),
      ) as _i4.Future<List<String>?>);

  @override
  _i4.Future<bool?> clearTemporaryFiles() => (super.noSuchMethod(
        Invocation.method(
          #clearTemporaryFiles,
          [],
        ),
        returnValue: _i4.Future<bool?>.value(),
      ) as _i4.Future<bool?>);

  @override
  _i4.Future<String?> getDirectoryPath({
    String? dialogTitle,
    bool? lockParentWindow = false,
    String? initialDirectory,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDirectoryPath,
          [],
          {
            #dialogTitle: dialogTitle,
            #lockParentWindow: lockParentWindow,
            #initialDirectory: initialDirectory,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> saveFile({
    String? dialogTitle,
    String? fileName,
    String? initialDirectory,
    _i3.FileType? type = _i3.FileType.any,
    List<String>? allowedExtensions,
    _i6.Uint8List? bytes,
    bool? lockParentWindow = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveFile,
          [],
          {
            #dialogTitle: dialogTitle,
            #fileName: fileName,
            #initialDirectory: initialDirectory,
            #type: type,
            #allowedExtensions: allowedExtensions,
            #bytes: bytes,
            #lockParentWindow: lockParentWindow,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [FilePickerResult].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilePickerResult extends _i1.Mock implements _i5.FilePickerResult {
  MockFilePickerResult() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.PlatformFile> get files => (super.noSuchMethod(
        Invocation.getter(#files),
        returnValue: <_i7.PlatformFile>[],
      ) as List<_i7.PlatformFile>);

  @override
  bool get isSinglePick => (super.noSuchMethod(
        Invocation.getter(#isSinglePick),
        returnValue: false,
      ) as bool);

  @override
  int get count => (super.noSuchMethod(
        Invocation.getter(#count),
        returnValue: 0,
      ) as int);

  @override
  List<String?> get paths => (super.noSuchMethod(
        Invocation.getter(#paths),
        returnValue: <String?>[],
      ) as List<String?>);

  @override
  List<String?> get names => (super.noSuchMethod(
        Invocation.getter(#names),
        returnValue: <String?>[],
      ) as List<String?>);

  @override
  List<_i2.XFile> get xFiles => (super.noSuchMethod(
        Invocation.getter(#xFiles),
        returnValue: <_i2.XFile>[],
      ) as List<_i2.XFile>);
}

/// A class which mocks [PlatformFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformFile extends _i1.Mock implements _i7.PlatformFile {
  MockPlatformFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  int get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: 0,
      ) as int);

  @override
  _i2.XFile get xFile => (super.noSuchMethod(
        Invocation.getter(#xFile),
        returnValue: _FakeXFile_0(
          this,
          Invocation.getter(#xFile),
        ),
      ) as _i2.XFile);
}
