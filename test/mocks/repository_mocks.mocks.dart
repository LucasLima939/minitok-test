// Mocks generated by Mockito 5.4.5 from annotations
// in minitok_test/test/mocks/repository_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i8;

import 'package:either_dart/either.dart' as _i4;
import 'package:minitok_test/core/error/failures.dart' as _i5;
import 'package:minitok_test/domain/entities/file_item.dart' as _i6;
import 'package:minitok_test/domain/repositories/file_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileRepository extends _i1.Mock implements _i2.FileRepository {
  MockFileRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.Failure, List<_i6.FileItem>>> getFiles() =>
      (super.noSuchMethod(
            Invocation.method(#getFiles, []),
            returnValue:
                _i3.Future<_i4.Either<_i5.Failure, List<_i6.FileItem>>>.value(
                  _i7.dummyValue<_i4.Either<_i5.Failure, List<_i6.FileItem>>>(
                    this,
                    Invocation.method(#getFiles, []),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, List<_i6.FileItem>>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i6.FileItem>> uploadFile(
    _i8.File? file,
    String? fileName,
    String? contentType,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#uploadFile, [file, fileName, contentType]),
            returnValue:
                _i3.Future<_i4.Either<_i5.Failure, _i6.FileItem>>.value(
                  _i7.dummyValue<_i4.Either<_i5.Failure, _i6.FileItem>>(
                    this,
                    Invocation.method(#uploadFile, [
                      file,
                      fileName,
                      contentType,
                    ]),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, _i6.FileItem>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i8.File>> downloadFile(
    _i6.FileItem? fileItem,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#downloadFile, [fileItem]),
            returnValue: _i3.Future<_i4.Either<_i5.Failure, _i8.File>>.value(
              _i7.dummyValue<_i4.Either<_i5.Failure, _i8.File>>(
                this,
                Invocation.method(#downloadFile, [fileItem]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, _i8.File>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, void>> deleteFile(String? fileId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFile, [fileId]),
            returnValue: _i3.Future<_i4.Either<_i5.Failure, void>>.value(
              _i7.dummyValue<_i4.Either<_i5.Failure, void>>(
                this,
                Invocation.method(#deleteFile, [fileId]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, void>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, String>> shareFile(
    _i6.FileItem? fileItem,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#shareFile, [fileItem]),
            returnValue: _i3.Future<_i4.Either<_i5.Failure, String>>.value(
              _i7.dummyValue<_i4.Either<_i5.Failure, String>>(
                this,
                Invocation.method(#shareFile, [fileItem]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, String>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i6.FileItem>> pickAndUploadImage() =>
      (super.noSuchMethod(
            Invocation.method(#pickAndUploadImage, []),
            returnValue:
                _i3.Future<_i4.Either<_i5.Failure, _i6.FileItem>>.value(
                  _i7.dummyValue<_i4.Either<_i5.Failure, _i6.FileItem>>(
                    this,
                    Invocation.method(#pickAndUploadImage, []),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, _i6.FileItem>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i6.FileItem>> pickAndUploadDocument() =>
      (super.noSuchMethod(
            Invocation.method(#pickAndUploadDocument, []),
            returnValue:
                _i3.Future<_i4.Either<_i5.Failure, _i6.FileItem>>.value(
                  _i7.dummyValue<_i4.Either<_i5.Failure, _i6.FileItem>>(
                    this,
                    Invocation.method(#pickAndUploadDocument, []),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, _i6.FileItem>>);
}
